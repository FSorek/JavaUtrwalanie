package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.BoardGame;

public class BoardGameManagerJDBC implements BoardGameManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableBoardGame = "CREATE TABLE BoardGame(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(40) UNIQUE, type varchar(20) NOT NULL,yearPublished integer)";

	private PreparedStatement addBoardGameStmt;
	private PreparedStatement deleteAllBoardGamesStmt;
	private PreparedStatement getAllBoardGamesStmt;

	private Statement statement;
	
	public BoardGameManagerJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("BoardGame".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableBoardGame);

			addBoardGameStmt = connection
					.prepareStatement("INSERT INTO BoardGame (name, type, yearPublished) VALUES (?, ?, ?)");
			deleteAllBoardGamesStmt = connection
					.prepareStatement("DELETE FROM BoardGame");
			getAllBoardGamesStmt = connection
					.prepareStatement("SELECT id, name, type, yearPublished FROM BoardGame");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearBoardGames() {
		try {
			deleteAllBoardGamesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	
	
	
	@Override
	public int addBoardGame(BoardGame boardGame) {
		int count = 0;
		try {
			addBoardGameStmt.setString(1, boardGame.getName());
			addBoardGameStmt.setString(2, boardGame.getType());
			addBoardGameStmt.setInt(3, boardGame.getYearPublished());

			count = addBoardGameStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public List<BoardGame> getAllBoardGames() {
		List<BoardGame> boardGames = new ArrayList<BoardGame>();

		try {
			ResultSet rs = getAllBoardGamesStmt.executeQuery();

			while (rs.next()) {
				BoardGame bg = new BoardGame();
				bg.setId(rs.getInt("id"));
				bg.setName(rs.getString("name"));
				bg.setType(rs.getString("type"));
				bg.setYearPublished(rs.getInt("yearPublished"));
				boardGames.add(bg);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return boardGames;
	}

	@Override
	public void addAllBoardGames(List<BoardGame> boardGames) {
		try {
			connection.setAutoCommit(false);
			for(BoardGame bg : boardGames)
			{
				addBoardGameStmt.setString(1, bg.getName());
				addBoardGameStmt.setString(2, bg.getType());
				addBoardGameStmt.setInt(3, bg.getYearPublished());
				addBoardGameStmt.executeUpdate();
			}	
			connection.commit();
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
		}
		
	}

	@Override
	public void deleteAllBoardGames(List<BoardGame> boardGames) {
		
	}
	
	

}
